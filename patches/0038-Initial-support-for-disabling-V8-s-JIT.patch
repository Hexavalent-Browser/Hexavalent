From decfda3a844d0964ed40e4183b699785c6ab9257 Mon Sep 17 00:00:00 2001
From: qua3k <cliffmaceyak@gmail.com>
Date: Tue, 19 Oct 2021 07:36:10 -0400
Subject: [PATCH 38/38] Initial support for disabling V8's JIT

---
 chrome/browser/about_flags.cc              | 5 +++++
 chrome/browser/flag-metadata.json          | 7 +++++++
 chrome/browser/flag-never-expire-list.json | 1 +
 chrome/browser/flag_descriptions.cc        | 5 +++++
 chrome/browser/flag_descriptions.h         | 3 +++
 gin/gin_features.cc                        | 3 +++
 gin/gin_features.h                         | 1 +
 gin/v8_initializer.cc                      | 4 ++++
 8 files changed, 29 insertions(+)

diff --git a/chrome/browser/about_flags.cc b/chrome/browser/about_flags.cc
index e50714dc9f4f8..369f5341a40b0 100644
--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -152,6 +152,7 @@
 #include "device/gamepad/public/cpp/gamepad_features.h"
 #include "device/vr/buildflags/buildflags.h"
 #include "extensions/buildflags/buildflags.h"
+#include "gin/gin_features.h"
 #include "gpu/config/gpu_finch_features.h"
 #include "gpu/config/gpu_switches.h"
 #include "media/audio/audio_features.h"
@@ -5063,6 +5064,10 @@ const FeatureEntry kFeatureEntries[] = {
      FEATURE_VALUE_TYPE(
          lookalikes::features::kDetectTargetEmbeddingLookalikes)},
 
+    {"disable-v8-jit", flag_descriptions::kV8NoJITName,
+     flag_descriptions::kV8NoJITDescription, kOsDesktop,
+     FEATURE_VALUE_TYPE(features::kV8NoJIT)},
+
     {"disable-process-reuse", flag_descriptions::kDisableProcessReuse,
      flag_descriptions::kDisableProcessReuseDescription, kOsDesktop,
      FEATURE_VALUE_TYPE(features::kDisableProcessReuse)},
diff --git a/chrome/browser/flag-metadata.json b/chrome/browser/flag-metadata.json
index a670bf1f6a828..ba928eb518bd7 100644
--- a/chrome/browser/flag-metadata.json
+++ b/chrome/browser/flag-metadata.json
@@ -1134,6 +1134,13 @@
     // issues.
     "expiry_milestone": -1
   },
+  {
+    "name": "disable-v8-jit",
+    "owners": [ "cliffmaceyak@gmail.com" ],
+    // This flag does not expire because it allows users to disable the
+    // V8 Just-In-Time compiler.
+    "expiry_milestone": -1
+  },
   {
     "name": "disable-virtual-keyboard",
     "owners": [ "myy", "essential-inputs-team@google.com" ],
diff --git a/chrome/browser/flag-never-expire-list.json b/chrome/browser/flag-never-expire-list.json
index 51f2b6772866c..b20893f0efd7c 100644
--- a/chrome/browser/flag-never-expire-list.json
+++ b/chrome/browser/flag-never-expire-list.json
@@ -27,6 +27,7 @@
   "disable-explicit-dma-fences",
   "disable-javascript-harmony-shipping",
   "disable-threaded-scrolling",
+  "disable-v8-jit",
   "disable-webrtc-hw-decoding",
   "disable-webrtc-hw-encoding",
   "disallow-doc-written-script-loads",
diff --git a/chrome/browser/flag_descriptions.cc b/chrome/browser/flag_descriptions.cc
index d41f7a9563b5a..bcdf7841afa8d 100644
--- a/chrome/browser/flag_descriptions.cc
+++ b/chrome/browser/flag_descriptions.cc
@@ -2636,6 +2636,11 @@ const char kUseSearchClickForRightClickDescription[] =
     "webpages and apps to consume alt+click. When disabled the legacy "
     "behavior of remapping alt+click to right click will remain unchanged.";
 
+const char kV8NoJITName[] = "Disable V8 JIT (JITless)";
+const char kV8NoJITDescription[] = 
+    "Experimental security mode that disables all runtime allocation of "
+    "executable memory";
+
 const char kV8VmFutureName[] = "Future V8 VM features";
 const char kV8VmFutureDescription[] =
     "This enables upcoming and experimental V8 VM features. "
diff --git a/chrome/browser/flag_descriptions.h b/chrome/browser/flag_descriptions.h
index 1078cced42c52..ac5ee4b24e300 100644
--- a/chrome/browser/flag_descriptions.h
+++ b/chrome/browser/flag_descriptions.h
@@ -1496,6 +1496,9 @@ extern const char kUseFirstPartySetDescription[];
 extern const char kUseSearchClickForRightClickName[];
 extern const char kUseSearchClickForRightClickDescription[];
 
+extern const char kV8NoJITName[];
+extern const char kV8NoJITDescription[];
+
 extern const char kV8VmFutureName[];
 extern const char kV8VmFutureDescription[];
 
diff --git a/gin/gin_features.cc b/gin/gin_features.cc
index 55c519e5a142b..1eac910dba79f 100644
--- a/gin/gin_features.cc
+++ b/gin/gin_features.cc
@@ -47,6 +47,9 @@ const base::Feature kV8NoReclaimUnmodifiedWrappers{
 const base::Feature kV8LocalHeaps{"V8LocalHeaps",
                                   base::FEATURE_ENABLED_BY_DEFAULT};
 
+// Disables the V8 Just-in-Time compiler
+const base::Feature kV8NoJIT{"V8NoJIT", base::FEATURE_DISABLED_BY_DEFAULT};
+
 // Enables TurboFan's direct heap access.
 const base::Feature kV8TurboDirectHeapAccess{"V8TurboDirectHeapAccess",
                                              base::FEATURE_ENABLED_BY_DEFAULT};
diff --git a/gin/gin_features.h b/gin/gin_features.h
index 2eb9e36d580c1..e7fdcbf55661f 100644
--- a/gin/gin_features.h
+++ b/gin/gin_features.h
@@ -18,6 +18,7 @@ GIN_EXPORT extern const base::Feature kV8FlushBytecode;
 GIN_EXPORT extern const base::Feature kV8FlushEmbeddedBlobICache;
 GIN_EXPORT extern const base::Feature kV8LazyFeedbackAllocation;
 GIN_EXPORT extern const base::Feature kV8LocalHeaps;
+GIN_EXPORT extern const base::Feature kV8NoJIT;
 GIN_EXPORT extern const base::Feature kV8NoReclaimUnmodifiedWrappers;
 GIN_EXPORT extern const base::Feature kV8OffThreadFinalization;
 GIN_EXPORT extern const base::Feature kV8OptimizeJavascript;
diff --git a/gin/v8_initializer.cc b/gin/v8_initializer.cc
index 6e7261ff6e7ea..8bdde491a709d 100644
--- a/gin/v8_initializer.cc
+++ b/gin/v8_initializer.cc
@@ -325,6 +325,10 @@ void V8Initializer::Initialize(IsolateHolder::ScriptMode mode) {
     SetV8Flags("--no-local-heaps --no-turbo-direct-heap-access");
   }
 
+  if (base::FeatureList::IsEnabled(features::kV8NoJIT)) {
+    SetV8Flags("--jitless");
+  }
+
   if (!base::FeatureList::IsEnabled(features::kV8TurboDirectHeapAccess)) {
     // The --turbo-direct-heap-access flag is enabled by default, so we need to
     // explicitly disable it if kV8TurboDirectHeapAccess is disabled.
-- 
2.30.1 (Apple Git-130)

